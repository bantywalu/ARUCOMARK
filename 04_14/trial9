import cv2
import cv2.aruco as aruco
import numpy as np
import time
import threading
import collections
collections.MutableMapping = collections.abc.MutableMapping  # Monkey-patch for Python 3.12 compatibility

from dronekit import connect, VehicleMode
from pymavlink import mavutil

# ----- Configuration Constants -----
TAKEOFF_ALTITUDE = 0.1    # meters for initial takeoff hover
ASCEND_VELOCITY = -0.3    # m/s upward in NED frame (negative Z is up)
NO_MARKER_TIMEOUT = 90    # seconds to wait for a marker before landing
SERIAL_BAUD = 57600
CONNECTION_STRINGS = ['/dev/ttyAMA0', '/dev/ttyACM0', '/dev/serial0']  # possible Pixhawk ports

def try_connect(conn_str, baud=SERIAL_BAUD):
    """Attempt to connect to Pixhawk on the given connection string."""
    try:
        print(f"Attempting connection on {conn_str}...")
        vehicle = connect(conn_str, baud=baud, wait_ready=False, heartbeat_timeout=60)
        print("Connected successfully, vehicle armed state:", vehicle.armed)
        return vehicle
    except Exception as e:
        print(f"Error connecting on {conn_str}: {e}")
        return None

def connect_pixhawk():
    """Try multiple ports to connect to Pixhawk. Returns Vehicle or None."""
    vehicle = None
    for conn in CONNECTION_STRINGS:
        vehicle = try_connect(conn)
        if vehicle:
            print(f"Connected to Pixhawk via {conn}")
            return vehicle
    print("Failed to connect to Pixhawk on any provided port.")
    return None

def arm_and_takeoff(vehicle, target_altitude):
    """Arms the vehicle and flies to target_altitude (in meters) in GUIDED mode."""
    print("Waiting for vehicle to become armable...")
    while not vehicle.is_armable:
        print("  ...Initializing sensors, please wait...")
        time.sleep(1)
    print("Arming motors...")
    vehicle.mode = VehicleMode("GUIDED")
    vehicle.armed = True
    while not vehicle.armed:
        print("  ...Waiting for arming...")
        time.sleep(1)
    print("Taking off!")
    vehicle.simple_takeoff(target_altitude)
    while True:
        alt = vehicle.location.global_relative_frame.alt or 0.0
        print(f"  Current Altitude: {alt:.2f} m")
        if alt >= target_altitude * 0.95:
            print("Target altitude reached.")
            break
        time.sleep(1)

def start_continuous_ascent(vehicle, velocity_m_s):
    """
    Starts a background thread to continuously send an upward velocity command.
    This runs until the stop_event is set.
    """
    stop_event = threading.Event()
    def _ascend_loop():
        msg = vehicle.message_factory.set_position_target_local_ned_encode(
            0, 0, 0, mavutil.mavlink.MAV_FRAME_LOCAL_NED,
            0b0000111111000111,   # type_mask (ignore pos setpoints, use velocity)
            0, 0, 0,              # x, y, z positions (not used)
            0, 0, velocity_m_s,   # vx, vy, vz (vz is negative for upward)
            0, 0, 0,              # ax, ay, az (not used)
            0, 0                  # yaw, yaw_rate (not used)
        )
        while not stop_event.is_set():
            vehicle.send_mavlink(msg)
            time.sleep(0.1)
    thread = threading.Thread(target=_ascend_loop, daemon=True)
    thread.start()
    return stop_event, thread

def main():
    print("Connecting to Pixhawk autopilot...")
    vehicle = connect_pixhawk()
    if vehicle is None:
        return

    arm_and_takeoff(vehicle, TAKEOFF_ALTITUDE)

    print("Opening camera...")
    cap = cv2.VideoCapture(
        "libcamerasrc ! video/x-raw,format=NV12,width=1920,height=1080,framerate=30/1 ! "
        "videoconvert ! videoscale ! video/x-raw,format=BGR ! appsink",
        cv2.CAP_GSTREAMER
    )
    if not cap.isOpened():
        print("Error: Could not open the camera.")
        vehicle.close()
        return

    cv2.namedWindow("ArUco Detection", cv2.WINDOW_NORMAL)
    aruco_dict = aruco.getPredefinedDictionary(aruco.DICT_4X4_50)
    detector_params = aruco.DetectorParameters_create()

    print("Starting continuous ascent. The drone will ascend until a marker is detected or timeout.")
    stop_event, ascend_thread = start_continuous_ascent(vehicle, ASCEND_VELOCITY)
    detection_start_time = time.time()
    marker_detected = False

    try:
        while True:
            ret, frame = cap.read()
            if not ret:
                print("Warning: Unable to read frame from camera.")
                if time.time() - detection_start_time > 5:
                    print("Camera feed lost. Initiating landing.")
                    break
                time.sleep(0.1)
                continue

            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            corners, ids, _ = aruco.detectMarkers(gray, aruco_dict, parameters=detector_params)

            if ids is not None and len(ids) > 0:
                marker_detected = True
                lat = vehicle.location.global_frame.lat
                lon = vehicle.location.global_frame.lon
                for marker_id in ids.flatten():
                    print(f"{{ GPS: ({lat:.6f}, {lon:.6f}), Marker ID: {marker_id} }}")

                aruco.drawDetectedMarkers(frame, corners, ids)
                cv2.putText(frame, "Marker Detected!", (30, 50),
                            cv2.FONT_HERSHEY_SIMPLEX, 1.0, (0, 0, 255), 2)

                stop_event.set()
                ascend_thread.join(timeout=1.0)

                cv2.imshow("ArUco Detection", frame)
                cv2.waitKey(500)

                print("Marker detected. Stopping ascent and initiating landing.")
                break
            else:
                cv2.putText(frame, "Ascending... (no marker yet)", (30, 50),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 0), 2)

            cv2.imshow("ArUco Detection", frame)

            if cv2.waitKey(1) & 0xFF == ord('q'):
                print("User requested exit (q pressed).")
                break

            if time.time() - detection_start_time > NO_MARKER_TIMEOUT:
                print(f"No marker detected within {NO_MARKER_TIMEOUT} seconds. Timeout reached, stopping ascent.")
                break

    except KeyboardInterrupt:
        print("User interrupted the script (KeyboardInterrupt).")

    finally:
        stop_event.set()
        if ascend_thread.is_alive():
            ascend_thread.join(timeout=2.0)
        print("Commanding LAND mode...")
        vehicle.mode = VehicleMode("LAND")
        time.sleep(1)
        cap.release()
        cv2.destroyAllWindows()
        vehicle.close()
        print("Shutdown complete. Vehicle landing in progress (check Pixhawk telemetry).")

if __name__ == "__main__":
    main()

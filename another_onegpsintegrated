
import collections
import collections.abc
if not hasattr(collections, 'MutableMapping'):
    collections.MutableMapping = collections.abc.MutableMapping

import cv2
import cv2.aruco as aruco
import math
import numpy as np
from dronekit import connect, VehicleMode  # DroneKit for Pixhawk telemetry

# ---- Configuration Constants ----
MARKER_REAL_SIZE = 0.05  # Marker width in meters (e.g., 5 cm)
FOCAL_LENGTH = 800       # Estimated focal length in pixels (adjust via calibration)
GPS_TARGET_MARKER_ID = 23  # Marker ID that triggers GPS capture

def estimate_distance(pixel_width):
    """
    Estimate the distance from the camera to the marker.
    Formula: distance = (marker_real_width * focal_length) / pixel_width
    """
    if pixel_width == 0:
        return None
    return (MARKER_REAL_SIZE * FOCAL_LENGTH) / pixel_width

def get_frame(cap):
    ret, frame = cap.read()
    if not ret:
        print("Error: Unable to capture frame from camera.")
        return None
    return frame

def get_vehicle_gps(vehicle):
    """
    Retrieve the GPS coordinates from the connected Pixhawk using DroneKit.
    Returns a tuple of (latitude, longitude) if available.
    """
    location = vehicle.location.global_frame
    if location.lat is not None and location.lon is not None:
        return location.lat, location.lon
    return None

def main():
    # Connect to the Pixhawk autopilot using DroneKit.
    # Adjust the connection string as needed for your hardware.
    try:
        print("Connecting to Pixhawk autopilot...")
        vehicle = connect('/dev/ttyAMA0', baud=57600, wait_ready=True)
    except Exception as e:
        print("Error connecting to Pixhawk:", e)
        return

    # Open the camera using a GStreamer pipeline (suitable for Raspberry Pi)
    cap = cv2.VideoCapture(
        "libcamerasrc ! video/x-raw,format=NV12,width=1920,height=1080,framerate=30/1 ! "
        "videoconvert ! videoscale ! video/x-raw,format=BGR ! appsink",
        cv2.CAP_GSTREAMER
    )
    if not cap.isOpened():
        print("Error: Could not open camera.")
        vehicle.close()
        return

    # Initialize the predefined ArUco dictionary and detector parameters
    aruco_dict = aruco.getPredefinedDictionary(aruco.DICT_4X4_50)
    parameters = aruco.DetectorParameters_create()

    print("Starting ArUco marker detection with GPS capture trigger. Press 'q' to exit.")

    while True:
        frame = get_frame(cap)
        if frame is None:
            break

        # Get frame dimensions and compute the frame center
        frame_height, frame_width = frame.shape[:2]
        frame_center = (frame_width // 2, frame_height // 2)
        cv2.circle(frame, frame_center, 5, (255, 0, 0), -1)  # Draw the frame center as a blue dot

        # Convert frame to grayscale for marker detection
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        corners, ids, _ = aruco.detectMarkers(gray, aruco_dict, parameters=parameters)

        if ids is not None:
            # Process the detected markers; here processing only the first detected marker.
            for i, marker_corners in enumerate(corners):
                # Draw the detected marker boundaries and IDs
                aruco.drawDetectedMarkers(frame, corners, ids)
                pts = marker_corners[0]
                # Compute the centroid of the marker
                marker_center = (int(np.mean(pts[:, 0])), int(np.mean(pts[:, 1])))
                cv2.circle(frame, marker_center, 5, (0, 0, 255), -1)

                # Compute guidance based on deviation from the frame center
                dx = marker_center[0] - frame_center[0]
                dy = marker_center[1] - frame_center[1]
                threshold = 20  # pixel threshold for considering the marker centered
                guidance = []
                if dx > threshold:
                    guidance.append("Move Left")
                elif dx < -threshold:
                    guidance.append("Move Right")
                if dy > threshold:
                    guidance.append("Move Up")
                elif dy < -threshold:
                    guidance.append("Move Down")
                guidance_text = "Centered" if not guidance else ", ".join(guidance)
                cv2.putText(frame, guidance_text, (marker_center[0] - 50, marker_center[1] - 20),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)

                # Estimate distance using the marker's pixel width (from the top edge)
                pt1 = pts[0]  # top-left corner
                pt2 = pts[1]  # top-right corner
                pixel_width = math.hypot(pt2[0] - pt1[0], pt2[1] - pt1[1])
                distance = estimate_distance(pixel_width)
                if distance is not None:
                    distance_text = f"{distance:.2f} m"
                    cv2.putText(frame, distance_text, (marker_center[0] - 50, marker_center[1] + 30),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2)

                # Check if the detected marker is the designated GPS trigger marker and is centered.
                if ids[i][0] == GPS_TARGET_MARKER_ID and guidance_text == "Centered":
                    gps_location = get_vehicle_gps(vehicle)
                    if gps_location is not None:
                        lat, lon = gps_location
                        # Print the GPS location to the terminal
                        print(f"GPS Location captured: Lat: {lat:.6f}, Lon: {lon:.6f}")
                    else:
                        print("GPS location not available")
                    
                    # Stop processing: release resources and exit the function.
                    cap.release()
                    cv2.destroyAllWindows()
                    vehicle.close()
                    return

                # Process only the first detected marker for this example.
                break

        cv2.imshow("ArUco Detection", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()
    vehicle.close()

if __name__ == '__main__':
    main()

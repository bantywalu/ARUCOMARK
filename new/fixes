# --- Python 3.12 Monkey Patch ---
import collections
import collections.abc
if not hasattr(collections, 'MutableMapping'):
    collections.MutableMapping = collections.abc.MutableMapping

import time
import threading
import cv2
import cv2.aruco as aruco
from dronekit import connect, VehicleMode
from pymavlink import mavutil

# --- CONSTANTS ---
ASCEND_VELOCITY = -0.3  # negative Z velocity means upward in NED
COMMAND_DURATION = 1
SERIAL_BAUD = 57600
CONNECTION_STRINGS = ['/dev/ttyACM0', '/dev/ttyUSB0', '/dev/serial0']  # Adjust based on your setup

# --- Keep Vehicle Armed ---
def force_keep_armed(vehicle):
    def monitor():
        while True:
            if not vehicle.armed:
                print("‚ö†Ô∏è Vehicle disarmed unexpectedly! Re-arming...")
                vehicle.armed = True
            time.sleep(1)
    threading.Thread(target=monitor, daemon=True).start()

# --- Connect to Pixhawk ---
def connect_pixhawk():
    for cs in CONNECTION_STRINGS:
        try:
            vehicle = connect(cs, baud=SERIAL_BAUD, wait_ready=True)
            print(f"Connected on {cs}")
            return vehicle
        except:
            continue
    raise Exception("Failed to connect to Pixhawk.")

# --- Send Velocity Commands ---
def send_ned_velocity(vehicle, vx, vy, vz, duration):
    msg = vehicle.message_factory.set_position_target_local_ned_encode(
        0, 0, 0, mavutil.mavlink.MAV_FRAME_LOCAL_NED,
        0b0000111111000111,
        0, 0, 0,
        vx, vy, vz,
        0, 0, 0,
        0, 0
    )
    end_time = time.time() + duration
    while time.time() < end_time:
        vehicle.send_mavlink(msg)
        time.sleep(0.1)

# --- Main Function ---
def main():
    vehicle = connect_pixhawk()

    force_keep_armed(vehicle)

    vehicle.mode = VehicleMode("GUIDED")
    while vehicle.mode.name != 'GUIDED':
        print("Switching to GUIDED mode...")
        time.sleep(1)

    vehicle.armed = True
    while not vehicle.armed:
        print("Arming vehicle...")
        vehicle.armed = True
        time.sleep(1)

    cap = cv2.VideoCapture(
        "libcamerasrc ! video/x-raw,format=NV12,width=1920,height=1080,framerate=30/1 ! "
        "videoconvert ! videoscale ! video/x-raw,format=BGR ! appsink",
        cv2.CAP_GSTREAMER
    )
    if not cap.isOpened():
        print("Failed to open camera.")
        vehicle.close()
        return

    aruco_dict = aruco.getPredefinedDictionary(aruco.DICT_4X4_50)
    aruco_params = aruco.DetectorParameters_create()

    print("Beginning ascent and marker search...")
    start_time = time.time()
    try:
        while True:
            ret, frame = cap.read()
            if not ret:
                continue

            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            corners, ids, _ = aruco.detectMarkers(gray, aruco_dict, parameters=aruco_params)

            if ids is not None and len(ids) > 0:
                print("‚úÖ Marker detected:", ids.flatten())
                loc = vehicle.location.global_relative_frame
                print(f"üìç GPS Location: lat={loc.lat}, lon={loc.lon}, alt={loc.alt:.2f} m")
                break

            if time.time() - start_time > 90:
                print("‚è≥ No marker detected within 90 seconds. Initiating landing...")
                break

            send_ned_velocity(vehicle, 0, 0, ASCEND_VELOCITY, COMMAND_DURATION)

            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
    except KeyboardInterrupt:
        print("Interrupted by user.")

    print("Landing...")
    vehicle.mode = VehicleMode("LAND")
    cap.release()
    vehicle.close()
    print("Completed.")

if __name__ == '__main__':
    main()

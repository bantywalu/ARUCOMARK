# --- Python 3.12 Monkey Patch ---
import collections
import collections.abc
if not hasattr(collections, 'MutableMapping'):
    collections.MutableMapping = collections.abc.MutableMapping

import time
import threading
import cv2
import cv2.aruco as aruco
import numpy as np
from dronekit import connect, VehicleMode
from pymavlink import mavutil

# ----- CONFIGURATION CONSTANTS -----
TAKEOFF_ALTITUDE   = 1.0
ASCEND_VELOCITY    = -0.3
COMMAND_DURATION   = 1
NO_MARKER_TIMEOUT  = 30  # Reduced to 30 seconds
SERIAL_BAUD        = 57600
CONNECTION_STRINGS = ['/dev/ttyAMA0', '/dev/ttyACM0', '/dev/serial0']

# --- Keep Vehicle Armed ---
def force_keep_armed(vehicle):
    def monitor():
        while True:
            if not vehicle.armed:
                print("⚠️ Vehicle disarmed unexpectedly! Re-arming...")
                vehicle.armed = True
            time.sleep(1)
    threading.Thread(target=monitor, daemon=True).start()

# ----- Helper Functions -----
def send_ned_velocity(vehicle, velocity_x, velocity_y, velocity_z, duration):
    msg = vehicle.message_factory.set_position_target_local_ned_encode(
        0, 0, 0,
        mavutil.mavlink.MAV_FRAME_LOCAL_NED,
        0b0000111111000111,
        0, 0, 0,
        velocity_x, velocity_y, velocity_z,
        0, 0, 0,
        0, 0
    )
    end_time = time.time() + duration
    while time.time() < end_time:
        vehicle.send_mavlink(msg)
        time.sleep(0.1)

def try_connect(connection_string, baud=SERIAL_BAUD):
    try:
        vehicle = connect(connection_string, baud=baud, wait_ready=False, heartbeat_timeout=60)
        print(f"Successfully connected; vehicle armed state: {vehicle.armed}")
        return vehicle
    except Exception as e:
        print(f"Error connecting on {connection_string}: {e}")
        return None

def connect_pixhawk():
    vehicle = None
    for cs in CONNECTION_STRINGS:
        vehicle = try_connect(cs)
        if vehicle:
            print(f"Connected to Pixhawk using port: {cs}")
            return vehicle
    raise Exception("Failed to connect to Pixhawk on any provided port. Please verify wiring and port names.")

def arm_and_takeoff(vehicle, target_altitude):
    print("Waiting for vehicle to become armable...")
    while not vehicle.is_armable:
        print(" Waiting for vehicle to initialize...")
        time.sleep(1)
    vehicle.mode = VehicleMode("GUIDED")
    vehicle.armed = True
    print("Arming vehicle...")
    while not vehicle.armed:
        print(" Waiting for arming...")
        time.sleep(1)
    print("Vehicle armed. Initiating takeoff!")
    vehicle.simple_takeoff(target_altitude)
    while True:
        current_alt = vehicle.location.global_relative_frame.alt
        print(f" Current Altitude: {current_alt:.2f} m")
        if current_alt >= target_altitude * 0.95:
            print("Reached target altitude.")
            break
        time.sleep(1)

# ----- MAIN CODE -----
def main():
    vehicle = connect_pixhawk()
    force_keep_armed(vehicle)
    arm_and_takeoff(vehicle, TAKEOFF_ALTITUDE)

    cap = cv2.VideoCapture(
        "libcamerasrc ! video/x-raw,format=NV12,width=1920,height=1080,framerate=30/1 ! "
        "videoconvert ! videoscale ! video/x-raw,format=BGR ! appsink",
        cv2.CAP_GSTREAMER
    )
    if not cap.isOpened():
        print("Error: Could not open camera.")
        vehicle.close()
        return

    aruco_dict = aruco.getPredefinedDictionary(aruco.DICT_4X4_50)
    parameters = aruco.DetectorParameters_create()

    print("Beginning continuous ascent. Scanning for ArUco marker...")
    detection_start_time = time.time()
    marker_detected = False

    try:
        while not marker_detected:
            # Frame capture and processing
            ret, frame = cap.read()
            if not ret:
                print("Failed to capture frame from camera.")
                continue

            # ArUco detection logic from working code
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            corners, ids, rejected = aruco.detectMarkers(gray, aruco_dict, parameters=parameters)

            if ids is not None and len(ids) > 0:
                # Draw detection annotations
                aruco.drawDetectedMarkers(frame, corners, ids)
                for i, marker_corner in enumerate(corners):
                    top_left = marker_corner[0][0]
                    cv2.putText(
                        frame,
                        f"ID: {ids[i][0]}",
                        (int(top_left[0]), int(top_left[1]) - 10),
                        cv2.FONT_HERSHEY_SIMPLEX,
                        0.5,
                        (0, 255, 0),
                        2
                    )
                    print(f"Detected marker ID: {ids[i][0]}")
                
                print("Valid ArUco marker detected! Stopping ascent.")
                marker_detected = True
                break

            # Show detection frame
            cv2.imshow("ArUco Detection", frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

            # Timeout check
            if (time.time() - detection_start_time) > NO_MARKER_TIMEOUT:
                print("No marker detected within 30-second timeout. Stopping ascent.")
                break

            # Continue ascending
            send_ned_velocity(vehicle, 0, 0, ASCEND_VELOCITY, COMMAND_DURATION)

    except KeyboardInterrupt:
        print("User interrupted the control loop.")

    print("Commanding landing...")
    vehicle.mode = VehicleMode("LAND")
    time.sleep(10)

    cap.release()
    cv2.destroyAllWindows()
    vehicle.close()
    print("Shutdown complete.")

if __name__ == '__main__':
    main()

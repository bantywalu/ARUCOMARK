import cv2
import cv2.aruco as aruco
import math

# Constants
MARKER_REAL_SIZE = 0.05  # Real size in meters (e.g., 5 cm)
FOCAL_LENGTH = 800       # Estimated focal length in pixels

def estimate_distance(pixel_width):
    if pixel_width == 0:
        return None
    return (MARKER_REAL_SIZE * FOCAL_LENGTH) / pixel_width

def get_frame(cap):
    ret, frame = cap.read()
    if not ret:
        print("Error: Unable to capture frame.")
        return None
    return frame

def main():
    cap = cv2.VideoCapture(
        'libcamerasrc ! video/x-raw,width=1280,height=720,framerate=30/1 ! '
        'videoconvert ! videoscale ! video/x-raw,format=BGR ! appsink',
        cv2.CAP_GSTREAMER
    )

    if not cap.isOpened():
        print("Error: Could not open camera.")
        return

    aruco_dict = aruco.getPredefinedDictionary(aruco.DICT_4X4_50)
    parameters = aruco.DetectorParameters()

    print("Starting ArUco detection with distance estimation. Press 'q' to quit.")

    while True:
        frame = get_frame(cap)
        if frame is None:
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        corners, ids, _ = aruco.detectMarkers(gray, aruco_dict, parameters=parameters)

        if ids is not None:
            aruco.drawDetectedMarkers(frame, corners, ids)
            for i, marker_corner in enumerate(corners):
                pts = marker_corner[0]
                top_left = pts[0]
                top_right = pts[1]

                # Estimate distance
                pixel_width = math.hypot(top_right[0] - top_left[0], top_right[1] - top_left[1])
                distance = estimate_distance(pixel_width)

                # Display ID and distance
                if distance is not None:
                    cv2.putText(frame, f"ID: {ids[i][0]}, {distance:.2f}m",
                                (int(top_left[0]), int(top_left[1]) - 10),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
                    print(f"ID: {ids[i][0]} - Distance: {distance:.2f} meters")

        cv2.imshow("ArUco Detection with Distance", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == '__main__':
    main()
